/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sheikh-arman/crd-controller/pkg/apis/arman.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArmanLister helps list Armans.
// All objects returned here must be treated as read-only.
type ArmanLister interface {
	// List lists all Armans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Arman, err error)
	// Armans returns an object that can list and get Armans.
	Armans(namespace string) ArmanNamespaceLister
	ArmanListerExpansion
}

// armanLister implements the ArmanLister interface.
type armanLister struct {
	indexer cache.Indexer
}

// NewArmanLister returns a new ArmanLister.
func NewArmanLister(indexer cache.Indexer) ArmanLister {
	return &armanLister{indexer: indexer}
}

// List lists all Armans in the indexer.
func (s *armanLister) List(selector labels.Selector) (ret []*v1alpha1.Arman, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Arman))
	})
	return ret, err
}

// Armans returns an object that can list and get Armans.
func (s *armanLister) Armans(namespace string) ArmanNamespaceLister {
	return armanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArmanNamespaceLister helps list and get Armans.
// All objects returned here must be treated as read-only.
type ArmanNamespaceLister interface {
	// List lists all Armans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Arman, err error)
	// Get retrieves the Arman from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Arman, error)
	ArmanNamespaceListerExpansion
}

// armanNamespaceLister implements the ArmanNamespaceLister
// interface.
type armanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Armans in the indexer for a given namespace.
func (s armanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Arman, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Arman))
	})
	return ret, err
}

// Get retrieves the Arman from the indexer for a given namespace and name.
func (s armanNamespaceLister) Get(name string) (*v1alpha1.Arman, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("arman"), name)
	}
	return obj.(*v1alpha1.Arman), nil
}
