/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ArmanSpecApplyConfiguration represents an declarative configuration of the ArmanSpec type for use
// with apply.
type ArmanSpecApplyConfiguration struct {
	DeploymentName    *string `json:"deploymentName,omitempty"`
	DeploymentImage   *string `json:"deploymentImage,omitempty"`
	Replicas          *int32  `json:"replicas,omitempty"`
	ServiceName       *string `json:"serviceName,omitempty"`
	ServicePort       *int32  `json:"servicePort,omitempty"`
	ServiceType       *string `json:"serviceType,omitempty"`
	ServiceTargetPort *int32  `json:"serviceTargetPort,omitempty"`
}

// ArmanSpecApplyConfiguration constructs an declarative configuration of the ArmanSpec type for use with
// apply.
func ArmanSpec() *ArmanSpecApplyConfiguration {
	return &ArmanSpecApplyConfiguration{}
}

// WithDeploymentName sets the DeploymentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeploymentName field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithDeploymentName(value string) *ArmanSpecApplyConfiguration {
	b.DeploymentName = &value
	return b
}

// WithDeploymentImage sets the DeploymentImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeploymentImage field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithDeploymentImage(value string) *ArmanSpecApplyConfiguration {
	b.DeploymentImage = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithReplicas(value int32) *ArmanSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithServiceName(value string) *ArmanSpecApplyConfiguration {
	b.ServiceName = &value
	return b
}

// WithServicePort sets the ServicePort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServicePort field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithServicePort(value int32) *ArmanSpecApplyConfiguration {
	b.ServicePort = &value
	return b
}

// WithServiceType sets the ServiceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceType field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithServiceType(value string) *ArmanSpecApplyConfiguration {
	b.ServiceType = &value
	return b
}

// WithServiceTargetPort sets the ServiceTargetPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceTargetPort field is set to the value of the last call.
func (b *ArmanSpecApplyConfiguration) WithServiceTargetPort(value int32) *ArmanSpecApplyConfiguration {
	b.ServiceTargetPort = &value
	return b
}
